-- Creacion de las tablas 
-----------------------------------1
create table nombreBase.empleado(
idEmpleado int IDENTITY(1,1),
cedula int NOT NULL,
fechaNacimiento date NOT NULL,
idGenero int NOT NULL,
primerNombre varchar(30) NOT NULL,
segundoNombre varchar(30) NOT NULL,
primerApellido varchar(30) NOT NULL,
segundoApellido varchar(30) NOT NULL,
nombreEmpleadoLogin varchar(30) NOT NULL,
email varchar(30) NOT NULL,
idDepartamento int NOT NULL,
fechaContratacion date NOT NULL,

--Declaración de atributos unicos
CONSTRAINT cedulaEmpleado UNIQUE(cedula),
CONSTRAINT emailEmpleado UNIQUE(email),

--Declaración PK
PRIMARY KEY (idEmpleado),

--Declaración FK
FOREIGN KEY (idGenero) REFERENCES genero(idGenero),
FOREIGN KEY (idDepartamento) REFERENCES departamento(idDepartamento)
);

-----------------------------------2
create table nombreBase.genero(
idGenero int IDENTITY(1,1),
detalle varchar(30) NOT NULL,

--Declaración PK
PRIMARY KEY (idGenero)
);

-----------------------------------3
create table nombreBase.departamento(
idDepartamento int IDENTITY(1,1),
abreviaturaDepartamento varchar(30) NOT NULL,
cuentaCorreoDepartamental varchar(30) NOT NULL,
detalle varchar(30) NOT NULL,

--Declaración de atributos unicos
CONSTRAINT emailDepartamental UNIQUE(cuentaCorreoDepartamental),

--Declaración PK
PRIMARY KEY (idDepartamento)
);

-----------------------------------4
create table nombreBase.contactoEmergencia(
idContantoEmergencia int IDENTITY(1,1),
idEmpleado int NOT NULL,
idGenero int NOT NULL,
idParentesco int NOT NULL,
primerNombre varchar(30) NOT NULL,
primerApellido varchar(30) NOT NULL,
telefono int NOT NULL,

--Declaración de atributos unicos
CONSTRAINT telefonoContactoEmergencia UNIQUE(telefono),

--Declaración PK
PRIMARY KEY (idContantoEmergencia),

--Declaración FK
FOREIGN KEY (idEmpleado) REFERENCES empleado(idEmpleado),
FOREIGN KEY (idGenero) REFERENCES genero(idGenero),
FOREIGN KEY (idParentesco) REFERENCES parentesco(idParentesco)
);

-----------------------------------5
create table nombreBase.parentesco(
idParentesco int IDENTITY(1,1),
detalle varchar(30) NOT NULL,

--Declaración PK
PRIMARY KEY (idParentesco)
);

-----------------------------------6
create table nombreBase.pais(
idPais int IDENTITY(1,1),
abreviaturaPais varchar(30) NOT NULL,
detalle varchar(30) NOT NULL,

--Declaración PK
PRIMARY KEY (idPais)
);

-----------------------------------7
create table nombreBase.provinciaEstado(
idProvinciaEstado int IDENTITY(1,1),
idPais int NOT NULL,
nombre varchar(30) NOT NULL,

--Declaración PK
PRIMARY KEY (idProvinciaEstado),

--Declaración FK
FOREIGN KEY (idPais) REFERENCES pais(idPais)
);

-----------------------------------8
create table nombreBase.cliente(
cedulaCliente int NOT NULL,
idPais int NOT NULL,
idProvinciaEstado int NOT NULL,
tipoCliente int NOT NULL,
categoria varchar(30) NOT NULL,
senas varchar(30) NOT NULL,
email varchar(30) NOT NULL,

--Declaración de atributos unicos
CONSTRAINT cedulaUnicaCliente UNIQUE(cedulaCliente),
CONSTRAINT emailCliente UNIQUE(email),

--Declaracion de restricciones check
CONSTRAINT CHK_categoriaCliente CHECK (categoria ='A' OR categoria ='B' OR categoria ='C' OR categoria ='D'),

--Declaración PK
PRIMARY KEY (cedulaCliente),

--Declaración FK
FOREIGN KEY (idPais) REFERENCES pais(idPais),
FOREIGN KEY (idProvinciaEstado) REFERENCES provinciaEstado(idProvinciaEstado)
);

-----------------------------------9
create table nombreBase.clienteFisico(
cedulaCliente int NOT NULL,
idGenero int NOT NULL,
primerNombre varchar(30) NOT NULL,
segundoNombre varchar(30) NOT NULL,
primerApellido varchar(30) NOT NULL,
segundoApellido varchar(30) NOT NULL,

--Declaración de atributos unicos
CONSTRAINT cedulaUnicaCliente UNIQUE(cedulaCliente),

--Declaración PK
PRIMARY KEY (cedulaCliente),

--Declaración FK
FOREIGN KEY (idGenero) REFERENCES genero(idGenero),
FOREIGN KEY (cedulaCliente) REFERENCES cliente(cedulaCliente)
);

-----------------------------------10
create table nombreBase.clienteJuridico(
cedualCliente int NOT NULL,
razonSocial varchar(30) NOT NULL,

--Declaración de atributos unicos
CONSTRAINT cedulaUnicaCliente UNIQUE(cedulaCliente),

--Declaración PK
PRIMARY KEY (cedulaCliente),

--Declaracion FK
FOREIGN KEY (cedulaCliente) REFERENCES cliente(cedulaCliente)
);

--Requerimientos

--Funcionalidad #3: funcion que recibe un numero de cliente y un mes/año y determina el monto promedio de compras del mes/año indicado

create function promedioDeCompras(@cedulaCliente int, @fecha1 date, @fecha2 date)
returns int
as
begin
return ( SELECT AVG(montoTotal)
FROM nombreBase.ordenCompra
where nombreBase.ordenCompra.cedulaCliente = @cedulaCliente AND nombreBase.ordenCompra.fecha BETWEEN @fecha1 and @fecha2)
end
go

--Procedimiento Almacenado #4: cuando se ingrese un nuevo cupon de descuento, notifique mediante un correo electrónico a todos los clientes para los cuales está disponible el cupón

CREATE PROCEDURE notificacionCuponNuevo
  @nuevoCupon int,
  @disponibilidadCupon varchar(30),
  @myRecipientList varchar(max),
AS
  SET @myRecipientList = STUFF((SELECT ';' + email 
    FROM nombreBase.cliente 
    WHERE @disponibilidadCupon = categoria FOR XML PATH('')),1,1,''),
  EXEC msdb.dbo.sp_send_dbmail  
    @profile_name = 'Tienda TEC', --emisor del correo
    @recipients = @myRecipientList, --lista de correos seleccionado
    @query = 'SELECT idCuponDescuento
              FROM nombreBase.cuponDescuento 
              WHERE @nuevoCupon = idCuponDescuento, 
    @body = 'HAY DISPONIBLE UN NUEVO CUPON DE DESCUENTO QUE PUEDE APLICAR', --mensaje del correo
    @subject = 'NOTIFICACION DE CUPONES DE DESCUENTO',  --asunto del correo
    @attach_query_result_as_file = 0 ; --es cero porque lo que se quiere enviar en el mensaje y no la consulta
GO;

--Procedimiento #7: se recibe un nuevo producto y genera el registro en el inventario

CREATE PROCEDURE registroInventario
  @idProducto int,
  @cantidadDisponible int,

AS
BEGIN
  UPDATE inventario SET cantidadDisponible = cantidadDisponible + @cantidadDisponible
  FROM nombreBase.producto
  WHERE @idProducto = idProducto
END

--Trigger #8: monitorea la tabla producto y cuando la cantidad disponible del producto es inferior a la cantidad minimaa permita, se envía un correo al departamento

CREATE TRIGGER cantidadMinimaPermitida
ON nombreBase.inventario 
AFTER UPDATE 
DECLARE @nombreProducto varchar(30),
DECLARE @cantidadDisponible int,
DECLARE @idProducto int,
DECLARE @cantidadMinimaProducto int,
SELECT @cantidadMinimaProducto = nombreBase.inventario.cantidadMinimaPermitida, @cantidadDisponible = 
nombreBase.inventario.cantidadDisponible, @nombreProducto = nombreBase.producto.nombre FROM nombreBase.inventario 
WHERE nombreBase.inventario.idProducto = new.idProducto
AS
BEGIN
  IF (@cantidadDisponible < cantidadMinimaProducto)
  BEGIN
  DECLARE @correoDepartamental varchar(30)
  DECLARE @abreviaturaDepartamento varchar(30)
  SELECT @correoDepartamental = nombreBase.departamento.cuentaCorreoDepartamental, @abreviaturaDepartamento = abreviaturaDepartamento FROM nombreBase.departamento
  WHERE @abreviaturaDepartamento = 'compras'
     EXEC msdb.dbo.sp_send_dbmail  
          @profile_name = 'Tienda TEC Administración',  
          @recipients = nombreBase.departamento.cuentaCorreoDepartamental,  
          @body = 'LA CANTIDAD DISPONIBLE DEL PRODUCTO ' + @nombreProducto + ' SE ENCUENTRA DEBAJO DE LA MINIMA',
          @subject = 'NOTIFICACION';
  END
END
GO

--Views #11: vista que contenga información no sensible de los clientes y las órdenes de compra correspondientes, donde se hayan aplicado códigos de descuento (mostrar tanto el monto original como el monto con descuento)

CREATE VIEW informaciónClienteCompras 
AS   
SELECT nombreBase.cliente.cedulaCliente,nombreBase.cliente.email, nombreBase.cliente.tipoCliente,nombreBase.cliente.categoria,nombreBase.ordenCompra.idOrden,nombreBase.ordenCompra.idCuponDescuento
FROM nombreBase.cliente AS clienteC1 
INNER JOIN nombreBase.ordenCompra AS clienteC2 ON clienteC1.cedulaCliente = clienteC2.cedulaCliente;
WHERE nombreBase.ordenCompra.idCuponDescuento <> NULL
GO 

--Views #12: vista que contenga la información de las ordenes de compras canceladas en el mes actual así como la razón de cancelación 
--indicada por el cliente, deben ser agrupadas según el cliente

CREATE VIEW ordenesCanceladas
AS
SELECT nombreBase.ordenCompraCancelada.idOrden,nombreBase.ordenCompraCancelada.fechaCancelacion,nombreBase.ordenCompraCancelada.cedulaCliente
FROM nombreBase.ordenCompraCancelada
WHERE MONTH(nombreBase.ordenCompraCancelada.fechaCancelacion) = MONTH(getdate())
GROUP BY nombreBase.ordenCompraCancelada.cedulaCliente
GO

--Indice #14: crear todos los indices necesarios para acelerar los procesos de busqueda
--en las tablas, especialmente en tablas que tendrán un crecimiento rápido como lo son:
--cliente, producto, item, ordenDeCompra, entre otros



    
    
    
