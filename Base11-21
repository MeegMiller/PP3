create database ;
use ;

create schema ;  

create table .proveedores(
  idProveedor int IDENTITY(1,1) PRIMARY KEY,
  telefono int NOT NULL UNIQUE,
  nombreCompania varchar(25) NOT NULL,
  estaActivo varchar(5) NOT NULL,
  idPais int NOT NULL FOREIGN KEY REFERENCES pais(idPais),
  CONSTRAINT activo_CHK CHECK (estaActivo='A' OR estaActivo='I')
);

create table .vendedor(
  idVendedor int IDENTITY(1,1) PRIMARY KEY,
  nombre varchar(25) NOT NULL,
  puesto varchar(25) NOT NULL,
  email varchar(50) NOT NULL UNIQUE,
  telefonoMovil int NOT NULL UNIQUE,
  telefonoOficina int NOT NULL UNIQUE,
  extOficina int NOT NULL UNIQUE,
  idGenero int NOT NULL,
  idProveedor int NOT NULL,
  idGenero FOREIGN KEY REFERENCES genero(idGenero),
  idProveedor FOREIGN KEY REFERENCES proveedores(idProveedor),
);

create table .inventario(
  idProducto int PRIMARY KEY,
  cantidadMinimaPermitida int NOT NULL,
  fechaIngreso date NOT NULL,
);

create table .producto(
  idProducto int IDENTITY(1,1) PRIMARY KEY,
  nombre varchar(30) NOT NULL PRIMARY KEY,
  precioUnitario money NOT NULL,
  estaDescontinuado varchar(5) NOT NULL,
  idProveedor int NOT NULL,
  CONSTRAINT descontinuado_CHK CHECK (estaDescontinuado='A' OR estaDescontinuado='D')
  idProveedor FOREIGN KEY REFERENCES proveedores(idProveedor),
);

create table tiendatEC.ordenCompra(
  idOrden int IDENTITY(1,1) PRIMARY KEY,
  cedulaCliente int NOT NULL,
  fecha date NOT NULL,
  montoTotal money NOT NULL,
  fechaAplicacionDescuento date,
  montoDescuento int DEFAULT '0',
  idCuponDescuento int,
  idCuponDescuento FOREIGN KEY REFERENCES cuponDescuento(idCuponDescuento),
  cedulaCliente FOREIGN KEY REFERENCES cliente(cedulaCliente),
);

CREATE TRIGGER actualizarDescuento 
AFTER INSERT ON tiendaTEC.ordenCompra
AS BEGIN 
INSERT ON ordenCompra.montoDescuento
SELECT porcentajeDescuento FROM tiendaTEC.cuponDescuento
UPDATE montoDescuento


create table .ordenDeCompraEstado(
  idEstado int IDENTITY(1,1) PRIMARY KEY,
  detalle varchar(30) NOT NULL,
  CONSTRAINT compraEstado_CHK CHECK (detalle='En preparaci칩n' OR detalle='en tr치nsito' OR detalle='cancelada' OR detalle='entregada' OR detalle='con retraso' OR detalle='extraviado')
);

create table .item(
  idItem int IDENTITY(1,1) PRIMARY KEY,
  monto money NOT NULL,
  idOrden int NOT NULL,
  idProducto int NOT NULL,
  idOrden FOREIGN KEY REFERENCES ordenCompra(idOrden),
  idProducto FOREIGN KEY REFERENCES proveedor(idProducto),
);

create table .bitacoraRegistroAuditoria(
  idRegistroAuditoria int IDENTITY(1,1) PRIMARY KEY,
  fechaHora datetime NOT NULL,
  detalle varchar(40) NOT NULL,
  idTipoRegistroAuditoria int NOT NULL,
  idEmpleado int NOT NULL,
  idTipoRegistroAuditoria FOREIGN KEY REFERENCES tipoRegistroAuditoria(idTipoRegistroAuditoria),
  idEmpleado FOREIGN KEY REFERENCES cliente(cedulaCliente),
);

create table .tipoRegistroAuditoria(
  idTipoRegistroAuditoria int IDENTITY(1,1) PRIMARY KEY,
  detalle varchar(30) NOT NULL PRIMARY KEY,
  CONSTRAINT detalleRegistro_CHK CHECK (detalle='cuponCreado' OR detalle='cuponAplicado' OR detalle='ordenCreada' OR detalle='cantidadMinimaSuperada' OR detalle='proveedorCreado')
);

create table .cuponDescuento(
  idCuponDescuento int IDENTITY(1,1) PRIMARY KEY,
  detalleCodigo varchar(40) NOT NULL,
  porcentajeDescuento int NOT NULL,
  fechaInicioVigencia date NOT NULL,
  fechaFinVigencia date NOT NULL,
  montoMinimoCompraParaAplicarCupon int NOT NULL,
  disponibilidadTipo varchar(5) NOT NULL,
  estaActivo varchar(5) NOT NULL,
  CONSTRAINT activado_CHK CHECK (estaActivo='A' OR estaActivo='I'),
  CONSTRAINT disponibilidad_CHK CHECK (disponibilidadTipo='A' OR disponibilidadTipo='B' OR disponibilidadTipo='C' OR disponibilidadTipo='D'),
);

create table .ordenCompraCancelada(
  idOrden int IDENTITY(1,1) PRIMARY KEY,
  fechaCancelacion date NOT NULL,
  explicacionCliente varchar(40) NOT NULL,
);

/*Funci칩n #1 */
create function productoMasVendido(@fecha1 varchar(50),@fecha2 varchar(50))
returns table
as
return(
    select top 1 item.idProducto,count(item.idProducto) as cantidad
    from ordenCompra join item 
    on ordenCompra.idOrden=item.idOrden
    where ordenCompra.fecha BETWEEN @fecha1 and @fecha2
    group by item.idProducto
    order by cantidad desc 
    )
end
go

/*Funci칩n #2 */
create function descuentoAplicado(@cuponDescuento int)
returns int
as
begin
return(
    select montoDescuento from tiendaTEC.ordenCompra 
    where tiendaTEC.ordenCompra.idCuponDescuento = @cuponDescuento
    )
end
go

/*Procedimiento almacenado #5*/


/*Procedimiento almacenado #6*/


/*Trigeer #9*/


/*Trigeer #10*/


/*Vista #13 */
CREATE VIEW productosNoVendidos AS
SELECT nombre
FROM producto a, item b
WHERE a.idProducto <> b.idProducto;
